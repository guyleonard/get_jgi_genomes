#!/usr/bin/env perl
use strict;
use warnings;

use Cwd;
use File::Basename;
use File::Path qw(make_path);
use Getopt::Std;
use List::MoreUtils qw(uniq);
use open qw(:std :utf8);
use utf8;
use XML::LibXML;

use Data::Dumper;

my $list    = "false";
my $cookies = 'cookies';
my ( $username, $password, $outdir, $project );
my $quiet = "false";

my %options = ();
getopts( 'u:p:c:g:fam:P:lhq', \%options ) or display_help();

# Help
if ( $options{h} ) { display_help(); }

if ( $options{q} ) {
    $quiet = "true";
}

# Signin Options / Cookies
if ( defined $options{u} && defined $options{p} ) {
    $username = "$options{u}";
    $password = "$options{p}";
    signin( $username, $password );
}
elsif ( defined $options{c} ) {
    $cookies = $options{c};
    print "User supplied cookie, skipping signin process.\n";
}
else {
    display_help();
}

if ( $options{l} ) {
    $list = "true";
    print "\tOutput: List Only\n";
}

# Download Project XML & Output Dir
if ( defined $options{f} ) {
    $project = 'fungi';

    print "Downloading XML from JGI -cosm Project: Mycocosm aka $project\n";
    download_xml($project);

    print "Parsing XML\n";
    parse_cosm_xml( $project, $list );
}
elsif ( defined $options{a} ) {
    $project = 'algae';

    print "Downloading XML from JGI -cosm Project: Phycocosm aka $project\n";
    download_xml($project);

    print "Parsing XML\n";
    parse_cosm_xml( $project, $list );
}
elsif ( defined $options{P} ) {
    $project = 'PhytozomeV' . "$options{P}";

    print "Downloading XML from JGI -zome Project: $project\n";
    download_xml($project);

    print "Parsing XML\n";
    parse_phytozome_xml( $project, $list );
}
elsif ( defined $options{m} ) {
    $project = 'MetazomeV' . "$options{m}";

    print "Downloading XML from JGI -zome Project: $project\n";
    download_xml($project);

    print "Parsing XML\n";
    parse_phytozome_xml( $project, $list );
}
else {
    print "No Output Directory or Group Project ID\n";
    exit(1);
}

sub display_help {
    print "Usage:\n";
    print
        "  get_jgi_genomes [-u <username> -p <password>] | [-c <cookies>] [-f | -a | -P 12 | -m 3] (-i) (-l) (-q)\n\n";
    print "Required:\n";
    print "\t-u <username>\n";
    print "\t-p <password>\n";
    print "or\n";
    print "\t-c <cookie file>\n";
    print "Database Options:\n";
    print "\t-f Mycocosm aka fungi\n";
    print "\t-a Phycocosm aka algae\n";
    print "\t-P <version> PhytozomeV aka plants\n";
    print "\t-m <metazome> MetazomeV aka metazoans\n";
    print "JGI ID:";
    print "\t-i <id> JGI ID of Genome Project\n";
    print "Listing:";
    print "\t-l list only, no downloads\n";

    exit(1);
}

# JGI insist we log in, that's okay. You should be aware that different genome portals
# may have different licenses etc...it's up to the individual user to be aware of these.
# So, let's login to the DOE JGI SSO
# We can do this with curl and our username/password
# This saves a cookie file for use later, it will need refreshing.
sub signin {

    my $user = shift;
    my $pass = shift;

    if ( -e 'cookies' ) {
        if ( -A 'cookies' > 1 || -M 'cookies' > 1 ) {
            print
                "It has been longer than one day since your last logged in.\nAttempting to login again...\n";
            run_cmd(
                "curl --silent 'https://signon.jgi.doe.gov/signon/create' --data-urlencode 'login=$user' --data-urlencode 'password=$pass' -c cookies > /dev/null",
                "$quiet"
            );
            check_cookie();
        }
        else {
            print "You are already logged in...please use the '-c' option.\n";
        }
    }
    else {
        print "Attempting to login...\n";
        run_cmd(
            "curl --silent 'https://signon.jgi.doe.gov/signon/create' --data-urlencode 'login=$user' --data-urlencode 'password=$pass' -c cookies > /dev/null",
            "$quiet"
        );
        check_cookie();
    }
}

# Now let's use curl again with our cookie signon and scrape the XML
# Only refresh if the file is older than 10 days...You can change this as you like
sub download_xml {
    my $portal = shift;

    if ( !-e "$portal\_files.xml" ) {    #> 10 ) {

        # Get portal List
        print "Downloading $portal XML - This may take some time...\n";
        run_cmd(
            "curl 'https://genome.jgi.doe.gov/portal/ext-api/downloads/get-directory?organism=$portal' -b $cookies > $portal\_files.xml",
            "$quiet"
        );
    }
    else {
        print
            "\t$portal\_files.xml is not older than 10 days, skipping re-download.\n";
    }

    # I can't get the XML parsing to work when "&quot;" exists in the file
    # let's cheat and remove it with sed?
    run_cmd( "sed -i \'s/&quot;//g\' $portal\_files.xml", "$quiet" );
}

sub parse_phytozome_xml {

    my ( $portal, $list ) = @_;

    my $xml_file = "$portal\_files.xml";

    my $portal_xml
        = XML::LibXML->load_xml( location => $xml_file, no_blanks => 1 );

    my $query = '//folder[@name="annotation"]';

    my %results;

    my $search = 'protein';
    if ( $portal =~ m/metazome/i ) { $search = 'peptide' }

    for my $file ( $portal_xml->findnodes($query) ) {
        for my $file_props ( $file->findnodes('//file') ) {

            my $url = $file_props->getAttribute('url');
            my $label = ( split /\//, $url )[9];
            if ( $url =~ m/.*$search\.fa\.gz/ ) {
                $results{"$label"} = "$url";
            }
        }
    }

    if ( !-d $portal ) {
        make_path($portal);
    }

    if ( $list eq "true" ) {

        genome_list_phytozome( \%results, $portal );
    }

    else {
        download_files_phytozome( \%results, $portal );
    }
}

## Parse the XML DOM
sub parse_cosm_xml {

    my ( $portal, $list ) = @_;

    my $xml_file = "$portal\_files.xml";

    my $portal_xml
        = XML::LibXML->load_xml( location => $xml_file, no_blanks => 1 );

    my $query
        = '/organismDownloads[@name="'
        . $portal
        . '"]/folder[@name="Files"]/folder[@name="Annotation"]/folder[@name="Filtered Models (best)"]/folder[@name="Proteins"]';

    my %results;

    for my $file ( $portal_xml->findnodes($query) ) {
        for my $file_props ( $file->findnodes('./*') ) {

            my $label = $file_props->getAttribute('label');
            my $url   = $file_props->getAttribute('url');

            # if the files don't look like this, then we don't want them
            # Armlut1_GeneCatalog_proteins_20180531.aa.fasta.gz
            # *proteins.fasta.gz
            # we also remove any files with some modifiers
            # then push them to a hash to remove genomes with two sets
            # of proteins.
            # it's a bit of a fudge, but the xml makes no effort to define
            # the set of AAs that are representative of the genome

            if ( $url =~ m/.*\_GeneCatalog_proteins_\d+\.aa\.fasta.gz/ ) {
                if ( $url !~ m/primary|secondary|alleles|diploid|old/ ) {
                    $results{"$label"} = "$url";
                }
            }
            elsif ( $url =~ m/.*proteins\.fasta\.gz/ ) {
                $results{"$label"} = "$url";
            }
        }
    }

    if ( !-d $portal ) {
        make_path($portal);
    }

    if ( $list eq "true" ) {

        genome_list( \%results, $portal );
    }

    else {
        download_files_cosms( \%results, $portal );
    }
}

sub genome_list {
    my %list_of_urls = %{ $_[0] };
    my $portal       = $_[1];

    my $filename = "$portal\/$portal\_list.txt";
    open my $fileout, '>>', $filename;

    foreach ( sort keys %list_of_urls ) {
        my $taxa   = $_;
        my $url    = $list_of_urls{$_};
        my @jgi_id = split /\//, $url;

        print $fileout
            "$taxa\t$jgi_id[2]\thttps://genome.jgi.doe.gov/portal/$jgi_id[2]/download/$jgi_id[4]\n";
    }

    close($fileout);
}

sub download_files_cosms {
    my %list_of_urls = %{ $_[0] };
    my $portal       = $_[1];

    foreach ( sort keys %list_of_urls ) {
        my $taxa     = $_;
        my $url      = $list_of_urls{$_};
        my $filename = ( split /\//, $url )[4];

        print "\tRetrieving: $filename\n";

        run_cmd(
            "curl --silent 'https://genome.jgi.doe.gov$url' -b cookies > $portal\/$filename",
            "$quiet"
        );
    }
}

sub genome_list_phytozome {
    my %list_of_urls = %{ $_[0] };
    my $portal       = $_[1];

    my $filename = "$portal\/$portal\_list.txt";
    open my $fileout, '>>', $filename;

    foreach ( sort keys %list_of_urls ) {
        my $taxa = $_;
        my $url  = $list_of_urls{$_};

        print $fileout "$taxa\thttps://genome.jgi.doe.gov$url\n";
    }

    close($fileout);
}

sub download_files_phytozome {
    my %list_of_urls = %{ $_[0] };
    my $portal       = $_[1];

    foreach ( sort keys %list_of_urls ) {
        my $taxa     = $_;
        my $url      = $list_of_urls{$_};
        my $filename = ( split /\//, $url )[9];

        print "\tRetrieving: $filename\n";

        run_cmd(
            "curl --silent 'https://genome.jgi.doe.gov$url' -b cookies > $portal\/$filename",
            "$quiet"
        );
    }
}

sub check_cookie {

    my $logged_in = 'flase';

    open my $cookie, '<', "cookies" or die "Cannot open cookies file: $!\n";
    while (<$cookie>) {
        my $line = $_;
        if ( $line =~ m/TRUE/ ) {
            $logged_in = 'true';
        }
    }

    if ( $logged_in eq 'true' ) {
        print "Login Successfull!\n";
    }
    else {
        print
            "There was a problem with your login attempt. Please Try again.\n";
        exit(1);
    }
}

sub run_cmd {
    my ( $cmd, $quiet ) = @_;
    msg("Running: $cmd") unless $quiet eq "true";
    system($cmd) == 0 or error("Error $? running command");
}

sub error {
    msg(@_);
    exit(1);
}

sub msg {
    print STDERR "@_\n";
}
