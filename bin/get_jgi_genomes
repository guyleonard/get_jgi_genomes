#!/usr/bin/env perl
use strict;
use warnings;

use Cwd;
use File::Basename;
use File::Path qw(make_path);
use Getopt::Long qw(:config no_ignore_case);
use List::MoreUtils qw(uniq);
use open qw(:std :utf8);
use utf8;
use XML::LibXML;

use Data::Dumper;

our $VERSION = "0.1";

#
# Getops Variables
#
my ( $username, $password, $cookies );
my ( $algae, $fungi, $metazoa, $plants );
my $jgi_tax_id = 'false';
my $list       = 'false';
my $quiet      = 'false';
my ( $cds, $gff, $transcripts, $assembly );

#
# Getopt
#
GetOptions(
    'user|u=s'      => \$username,
    'pass|p=s'      => \$password,
    'cookies|c'     => \$cookies,
    'algae|a'       => \$algae,
    'fungi|f'       => \$fungi,
    'metazoa|m=s'   => \$metazoa,
    'plants|P=s'    => \$plants,
    'id|i=s'        => \$jgi_tax_id,
    'cds|C'         => sub { $cds = 'cds' },
    'gff|g'         => sub { $gff = 'gff' },
    'transcripts|t' => sub { $transcripts = 'transcripts' },
    'assembly|A'    => sub { $assembly = 'assembly' },
    'list|l'        => sub { $list = 'true' },
    'quiet|q'       => sub { $quiet = 'true' },
    'version|v' =>
        sub { print "get_jgi_genomes Version: $VERSION\n"; exit(0) },
    'help|h' => sub { display_help() }
);

# Signin Options / Cookies
if ( $username && $password ) {
    signin( $username, $password );
    portal();
}
elsif ($cookies) {
    check_cookie_old();
    portal();
}
else {
    print "WARN: Missing one of '-u & -p' or '-c'\n";
    display_help();
}

#
# Main
#
sub portal {

    # Download Project XML & Create Output Dir
    # Fungi
    if ($fungi) {
        my $project = 'fungi';

        print "INFO: User Selected Mycocosm aka $project\n";
        download_xml($project);

        print "INFO: Parsing XML\n";
        parse_cosm_xml( $project, $jgi_tax_id );
    }

    # Algae
    elsif ($algae) {
        my $project = 'phycocosm';

        print "INFO: User Selected Phycocosm aka $project\n";
        download_xml($project);

        print "INFO: Parsing XML\n";
        parse_cosm_xml( $project, $jgi_tax_id );
    }

    # Plants
    elsif ($plants) {
        my $project = 'PhytozomeV' . "$plants";

        print "INFO: User Selected Phytozome aka $project\n";
        download_xml($project);

        print "INFO: Parsing XML\n";
        parse_zome_xml($project);
    }

    # Animals
    elsif ($metazoa) {
        my $project = 'MetazomeV' . "$metazoa";

        print "INFO: User Selected Metazome aka $project\n";
        download_xml($project);

        print "INFO: Parsing XML\n";
        parse_zome_xml($project);
    }
    else {
        print "WARN: You must define a portal/cosm.\n";
        exit(1);
    }
}

#
# Signon & Cookies
#
sub signin {

    my $user = shift;
    my $pass = shift;

    print "INFO: Attempting to login...\n";
    run_cmd(
        "curl --silent 'https://signon.jgi.doe.gov/signon/create' --data-urlencode 'login=$user' --data-urlencode 'password=$pass' -c signon.cookie > /dev/null",
        "$quiet"
    );

    check_cookie_valid();
}

sub check_cookie_old {

    if ( -A 'signon.cookie' > 1 || -M 'signon.cookie' > 1 ) {
        print
            "INFO: It has been longer than one day since your last login.\nINFO: Please use the -u and -p options.\n";
        exit(1);
    }
    else {
        check_cookie_valid();
    }
}

sub check_cookie_valid {
    my $logged_in = 'false';
    open my $cookie, '<', "signon.cookie"
        or die "Cannot open signon.cookie file: $!\n";

    while (<$cookie>) {
        my $line = $_;
        if ( $line =~ m/TRUE/ ) {
            $logged_in = 'true';
        }
    }

    if ( $logged_in eq 'true' ) {
        print "INFO: Login Successfull!\n";
    }
    else {
        print
            "WARN: There was a problem with your login attempt. Please Try again.\n";
        exit(1);
    }
}

#
# XML Download
#
# Works for all portals
sub download_xml {
    my $portal = shift;

    if ( -e "$portal\_files.xml" ) {
        if (   -A "$portal\_files.xml" > '10'
            || -M "$portal\_files.xml" > '10' )
        {
            print
                "\tWarning: $portal\_files.xml found and is greater than 10 days old. Continuing, but you may wish to stop, delete and try again.\n";
        }
        else {
            print
                "Info: $portal\_files.xml found and is less than 10 days old. Continuing.\n";
        }
    }
    elsif ( !-e "$portal\_files.xml" ) {

        # Get portal List
        print "Downloading $portal XML - This may take a few minutes...\n";
        run_cmd(
            "curl 'https://genome.jgi.doe.gov/portal/ext-api/downloads/get-directory?organism=$portal' -b signon.cookie > $portal\_files.xml",
            "$quiet"
        );
    }

    # I can't get the XML parsing to work when "&quot;" exists in the file
    # let's cheat and remove it with sed
    run_cmd( "sed -i \'s/&quot;//g\' $portal\_files.xml", "true" );
}

#
# XML Parsing
#
# Mycocosm and Algae
sub parse_cosm_xml {

    my $portal     = shift;
    my $jgi_tax_id = shift;
    my %results;
    my $url_filter;
    my $query
        = "//organismDownloads[\@name=\"$portal\"]//folder[\@name=\"Files\"]";

    my $xml_file = "$portal\_files.xml";

    if ( !-z $xml_file ) {

        my $portal_xml
            = XML::LibXML->load_xml( location => $xml_file, no_blanks => 1 );

        if ( defined $assembly && $assembly eq 'assembly' ) {

            $query
                = $query
                . "//folder[\@name=\"Assembly\"]//folder[\@name=\"Assembled scaffolds (unmasked)\"]";
            $url_filter = qr/(.*scaffolds.fasta.gz)/i;
            $portal     = "$portal\/assembly";
        }
        else {

            $query
                = $query
                . "//folder[\@name=\"Annotation\"]//folder[\@name=\"Filtered Models (best)\"]";

            if ( defined $gff && $gff eq 'gff' ) {
                $query      = $query . "//folder[\@name=\"Genes\"]";
                $url_filter = qr/(.*gff3.gz|.*gff.gz)/;
                $portal     = "$portal\/gff";
            }
            elsif ( defined $cds && $cds eq 'cds' ) {
                $query      = $query . "//folder[\@name=\"CDS\"]";
                $url_filter = qr/(.*fasta.gz)/i;
                $portal     = "$portal\/cds";
            }
            elsif ( defined $transcripts && $transcripts eq 'transcripts' ) {
                $query      = $query . "//folder[\@name=\"Transcripts\"]";
                $url_filter = qr/(.*fasta.gz)/i;
                $portal     = "$portal\/transcripts";
            }
            else {
                $query      = $query . "//folder[\@name=\"Proteins\"]";
                $url_filter = qr/(.*fasta.gz)/;
                $portal     = "$portal\/pep";
            }
        }

        for my $file ( $portal_xml->findnodes($query) ) {
            for my $file_props ( $file->findnodes('./file') ) {
                my $url   = $file_props->getAttribute('url');
                my $label = $file_props->getAttribute('label');

                if ( $url =~ m/$url_filter/i ) {
                    if ( $url
                        !~ m/primary|secondary|alleles|diploid|promoters|unmapped/
                        )
                    {
                        $results{"$label"} = "$url";
                    }
                }
            }
        }
    }
    else {
        print "WARN: The $xml_file file is empty.\n";
        exit(1);
    }

    if ( !-d $portal ) {
        make_path($portal);
    }

    if ( $jgi_tax_id ne 'false' ) {

        genome_list_cosm( \%results, $portal );
        download_single_taxa( $jgi_tax_id, $portal );
    }
    else {

        if ( $list eq 'true' ) {
            genome_list_cosm( \%results, $portal );
        }
        else {
            genome_list_cosm( \%results, $portal );

            download_files_cosm( \%results, $portal );
        }
    }
}

# Animals and Plants
sub parse_zome_xml {

    my $portal = shift;
    my %results;
    my $url_filter;
    my $query = "//organismDownloads[\@name=\"$portal\"]";

    my $xml_file = "$portal\_files.xml";

    if ( !-z $xml_file ) {

        my $portal_xml
            = XML::LibXML->load_xml( location => $xml_file, no_blanks => 1 );

        if ( defined $assembly && $assembly eq 'assembly' ) {

            $query      = $query . "//folder[\@name=\"assembly\"]";
            $url_filter = '.fa.gz';
            $portal     = "$portal\/assembly";
        }
        else {
            $query = $query . "//folder[\@name=\"annotation\"]";

            if ( defined $gff && $gff eq 'gff' ) {
                $url_filter = 'gene.gff3.gz';
                $portal     = "$portal\/gff";
            }
            elsif ( defined $cds && $cds eq 'cds' ) {
                $url_filter = 'cds.fa.gz';
                $portal     = "$portal\/cds";
            }
            elsif ( defined $transcripts && $transcripts eq 'transcripts' ) {
                $url_filter = 'transcript.fa.gz';
                $portal     = "$portal\/transcripts";
            }
            else {
                $url_filter = 'protein.fa.gz';
                $portal     = "$portal\/pep";
                if ( $portal =~ m/metazome/i ) {
                    $url_filter = 'peptide.fa.gz';
                }
            }
        }

        for my $file ( $portal_xml->findnodes($query) ) {
            for my $file_props ( $file->findnodes('./file') ) {

                my $url = $file_props->getAttribute('url');
                my $label = ( split /\//, $url )[9];

                if ( $url =~ m/$url_filter/ ) {
                    $results{"$label"} = "$url";
                }
            }
        }
    }
    else {
        print "WARN: The $xml_file file is empty.\n";
        exit(1);
    }

    if ( !-d $portal ) {
        make_path($portal);
    }

    if ( $jgi_tax_id ne 'false' ) {

        genome_list_zome( \%results, $portal );
        download_single_taxa( $jgi_tax_id, $portal );
    }
    else {
        if ( $list eq 'true' ) {

            genome_list_zome( \%results, $portal );
        }

        else {
            genome_list_zome( \%results, $portal );

            download_files_zome( \%results, $portal );
        }
    }
}

#
# Generate List Output
#
sub genome_list_cosm {
    my %list_of_urls = %{ $_[0] };
    my $portal       = $_[1];

    my $filename = "$portal\_list.txt";
    open my $fileout, '>', $filename;

    foreach ( sort keys %list_of_urls ) {
        my $taxa = $_;
        my $url  = $list_of_urls{$_};
        my $jgi_id;

        if ( $url =~ m/.*ext-api.*/ ) {
            $jgi_id = ( split /\//,  $url )[5];
            $url    = ( split /=\//, $url )[1];
        }
        else {
            $jgi_id = ( split /\//,       $url )[2];
            $url    = ( split /portal\//, $url )[1];
        }

        print $fileout
            "$taxa\t$jgi_id\thttps://genome.jgi.doe.gov/portal/$url\n";
    }

    close($fileout);
}

sub genome_list_zome {
    my %list_of_urls = %{ $_[0] };
    my $portal       = $_[1];

    my $filename = "$portal\_list.txt";
    open my $fileout, '>', $filename;

    foreach ( sort keys %list_of_urls ) {
        my $taxa = $_;
        my $url  = $list_of_urls{$_};

        my $jgi_id = ( split /\_/, $taxa )[0];

        print $fileout "$taxa\t$jgi_id\thttps://genome.jgi.doe.gov$url\n";
    }

    close($fileout);
}

#
# Download Single Taxa's Files
#
sub download_single_taxa {

    my $jgi_tax_id = shift;
    my $portal     = shift;

    my $list = "$portal\_list.txt";

    print "Attempting to find: $jgi_tax_id from $portal\_list.txt\n";

    open( my $fh, '<', $list )
        or die "Could not open file '$list' $!";

    while ( my $line = <$fh> ) {

        chomp($line);
        my $jgi_id = ( split /\t/, $line )[1];

        if ( $jgi_id eq $jgi_tax_id ) {

            my $filename;
            my $url = ( split /\t/, $line )[2];

            if ( $portal =~ /fungi|phycocosm/ ) {
                $filename = ( split /\t/, $line )[2];
                $filename = ( split /\//, $filename )[6];
            }
            elsif ( $portal =~ /phytozome|metazome/i ) {
                $filename = ( split /\t/, $line )[0];
            }

            print "\tRetrieving: $filename\n";

            run_cmd(
                "curl --silent '$url' -b signon.cookie > $portal\/$filename",
                "$quiet"
            );
        }
    }
}

#
# Download All Files
#
sub download_files_cosm {
    my %list_of_urls = %{ $_[0] };
    my $portal       = $_[1];
    my $jgi_id       = $_[2];
    my $filename;

    foreach ( sort keys %list_of_urls ) {
        my $taxa = $_;
        my $url  = $list_of_urls{$_};
        my $Jgi_id;

        if ( $url =~ m/.*ext-api.*/ ) {
            $jgi_id = ( split /\//,  $url )[5];
            $url    = ( split /=\//, $url )[1];
        }
        else {
            $jgi_id = ( split /\//,       $url )[2];
            $url    = ( split /portal\//, $url )[1];
        }

        $filename = ( split /\//, $url )[2];

        print "\tRetrieving: $filename\n";

        run_cmd(
            "curl --silent 'https://genome.jgi.doe.gov/portal/$url' -b signon.cookie > $portal\/$filename",
            "$quiet"
        );
    }
}

sub download_files_zome {
    my %list_of_urls = %{ $_[0] };
    my $portal       = $_[1];
    my $subdir       = 'pep';

    foreach ( sort keys %list_of_urls ) {
        my $taxa     = $_;
        my $url      = $list_of_urls{$_};
        my $filename = ( split /\//, $url )[9];

        print "\tRetrieving: $filename\n";
        run_cmd(
            "curl --silent 'https://genome.jgi.doe.gov$url' -b signon.cookie > $portal\/$filename",
            "$quiet"
        );
    }
}

#
# Helpers
#
sub run_cmd {
    my ( $cmd, $quiet ) = @_;
    msg("Running: $cmd") unless $quiet eq "true";
    system($cmd) == 0 or error("Error $? running command");
}

sub error {
    msg(@_);
    exit(1);
}

sub msg {
    print STDERR "@_\n";
}

sub HELP_MESSAGE {
    display_help();
}

sub VERSION_MESSAGE {
    print "Version: $VERSION\n";
}

#
# Help
#
sub display_help {
    print "Usage:\n";
    print
        "  get_jgi_genomes [-u <username> -p <password>] | [-c <cookies>] [-f | -a | -P 12 | -m 3] (-i) (-l) (-A) (-C) (-g) (-t) (-q)\n\n";
    print "Required:\n";
    print "\t-u <username>\n";
    print "\t-p <password>\n";
    print "or\n";
    print "\t-c <cookie file>\n";
    print "Portal Choice:\n";
    print "\t-f Mycocosm aka fungi\n";
    print "\t-a Phycocosm aka algae\n";
    print "\t-P <version> PhytozomeV aka plants\n";
    print "\t-m <version> MetazomeV aka metazoans\n";
    print "Portal File Options:\n";
    print "\t-A get assembly\n";
    print "\t-C get CDS\n";
    print "\t-g get GFF\n";
    print "\t-t get transcripts\n";
    print "JGI Taxa ID:\n";
    print "\t-i <id> JGI ID of Genome Project\n";
    print "Other:\n";
    print "\t-l list only, no downloads\n";

}
